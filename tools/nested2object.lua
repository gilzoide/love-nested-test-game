local args = require 'pl.lapp' [[
Usage: nested2object [--tight] [<input>] [<output>]

Options:
  --tight                       Output without indentation
  <input> (default stdin)       Input file. If absent or '-', reads from stdin
  <output> (default stdout)     Output file. If absent or '-', writes to stdout
]]
if args.input == '-' then args.input = io.stdin end
if args.output == '-' then args.output = io.stdout end

local nested = require 'lib.nested'
local pretty = require 'pl.pretty'
local List = require 'pl.List'
local template = require 'pl.template'

local obj = assert(nested.decode_file(args.input, nested.bool_number_filter))

local kv = List()
local event_listeners = List()
local other_code = List()

for k, v in nested.metadata(obj) do
    kv:append({k, v})
end

local function read_event_listener(t, i)
    local listener = {}
    for i = i, #t do
        local v = t[i]
        if v == 'do' then
            assert(#listener > 0, "Event listener must have at least one specifier")
            local handler = assert(t[i + 1], "Expected event handler after 'do' keyword")
            handler = handler:match('^[ \t\r\f\v]*\n*(.+)')
            handler = handler:match('(.-)\n*[ \t\r\f\v]*$')
            listener.handler = handler
            return listener, i + 1
        end
        listener[#listener + 1] = v
    end
    return nil, "Expected 'do' keyword in event listener definition"
end

local i = 1
while i <= #obj do
    local v = obj[i]
    if v == 'on' then
        local listener
        listener, i = assert(read_event_listener(obj, i + 1))
        event_listeners:append(listener)
    else
        other_code:append(v)
    end
    i = i + 1
end

local function stringify(v)
    if type(v) == 'table' then
        return pretty.write(v, '')
    else
        return string.format('%q', v)
    end
end

local rendered = assert(template.substitute([[
-- Code generated by nested2object
# for k, v in nested.metadata(obj) do
$(k) = $(stringify(v))
# end
# for code in other_code:iter() do
$(code)
# end

# for listener in event_listeners:iter() do
function $(listener[1])(...)
$(listener.handler)
end

# end
# for listener in event_listeners:iter() do
EventManager:register(self, $(stringify(listener[1])))
# end
]], {
    event_listeners = event_listeners,
    nested = nested,
    obj = obj,
    other_code = other_code,
    stringify = stringify,
}))
local output = io.output(args.output)
output:write(rendered)
output:close()