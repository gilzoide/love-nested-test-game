PetecaScene

p1x: `WINDOW_WIDTH * 0.25`
p2x: `WINDOW_WIDTH * 0.75`
py: `WINDOW_HEIGHT - R.recipe.Player.radius`
petecaX: `WINDOW_WIDTH * 0.5`
petecaY: 100
paused: true

init: `do
    love.graphics.setBackgroundColor(0.12, 0.12, 0.12)
    world:disable_method('update', paused)
    self:reset()
end`

reset: `do
    peteca.body.position = { petecaX, petecaY }
    peteca.body.angle = 0
    peteca.body.angularVelocity = 0
    peteca.body.linearVelocity = { 0, 0.1 }
    peteca.lastToHit = nil

    player1.body.position = { p1x, py }
    player1.body.linearVelocity = { 0, 0.1 }
    player1.body.angle = 0
    player1.body.angularVelocity = 0
    player1:reset()

    player2.body.position = { p2x, py }
    player2.body.linearVelocity = { 0, 0.1 }
    player2.body.angle = 0
    player2.body.angularVelocity = 0
    player2:reset()
end`

[World id: world yg: `9.81 * METER_BY_PIXEL`
    [Arena id: arena]
    [Player id: player1 color: [0 1 0]
        leftKey: a
        rightKey: d
        otherPlayer: `player2`
    ]
    [Player id: player2 color: [1 1 0] flipX: true
        leftKey: left
        rightKey: right
        otherPlayer: `player1`
    ]
    [Peteca id: peteca x: `petecaX` y: `petecaY`]

    [CollisionTracker a: [tag: PETECA] b: [tag: GROUND]
        beginContact: { peteca.lastToHit.otherPlayer.takingDamage: true  }
        endContact:   { peteca.lastToHit.otherPlayer.takingDamage: false }
        postSolve: `do peteca:impulse(contact:getNormal()) end`
    ]
    [CollisionTracker a: [tag: PETECA] b: [tag: RACKET]
        postSolve: { a.root.lastToHit: b.root }
    ]
    [CollisionTracker a: [tag: PETECA] b: [tag: BODY]
        beginContact: { b.root.takingDamage: true  }
        endContact:   { b.root.takingDamage: false }
    ]
]

lifeBarMargin: 10
[LifeBar id: player1Life color: `player1.color`
    x: `lifeBarMargin` y: `lifeBarMargin`
    maxLife: `player1.maxLife`
    currentLife: `player1.currentLife`
    takingDamage: `player1.takingDamage`
]
[Transform x: `WINDOW_WIDTH` sx: -1 sy: 1
    [LifeBar id: player2Life color: `player2.color`
        x: `lifeBarMargin` y: `lifeBarMargin`
        maxLife: `player2.maxLife`
        currentLife: `player2.currentLife`
        takingDamage: `player2.takingDamage`
    ]
]

[Score id: score]

[Transform y: `WINDOW_HEIGHT - 20`
    [FPS]
]

[When
    player1.gameover: `do
        self.gameover = true
        score:showWinner(2)
    end`

    player2.gameover: `do
        self.gameover = true
        score:showWinner(1)
    end`
]

"$set gameover": `do
    world:disable_method('update', value)
end`

[KeyDetector key: return
    [When '!gameover pressed': `do
        root.paused = not paused
        world:disable_method('update', paused)
        if paused then
            score:showPaused()
        else
            score:hide()
        end
    end`]

    [When 'gameover pressed': `do
        self:reset()
        score:hide()
        root.gameover = false
    end`]
]