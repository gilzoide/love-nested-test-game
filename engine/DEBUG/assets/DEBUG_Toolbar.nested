Rectangle

anchorY: [1 1]
height: 32
marginX: [-1 1]
fillColor: [0.34902 0.615686 0.862745]
lineColor: `fgColor`

fgColor: [1 1 1]
appPaused: false
margins: 10

draw: `do
    love.graphics.setLineStyle('rough')
    self:invoke_super('draw')
end`

togglePause: `do
    self.appPaused = not appPaused
    Scene.paused = appPaused
end`

[InputMap id: KEY
    keycode: [
        pan_up: [up w]
        pan_left: [left a]
        pan_down: [down s]
        pan_right: [right d]
        scale_up: [e]
        scale_down: [q]
        pause: [p]
        dump: [d]
        ctrl_modifier: [lctrl rctrl]
        edit_faster: [lshift rshift]
    ]

    [When
        "pause.pressed, ctrl_modifier.down": `do root:invoke('togglePause') end`
        "dump.pressed, ctrl_modifier.down": `do dump_state() end`
    ]
]

[Text id: TITLE font: `DEBUG.font` color: `fgColor`
    anchorX: [0 0]
    marginRight: 70
    align: center valign: center
    text: DEBUG 
]
[Rectangle id: PAUSE_BUTTON
    anchorX: [0 0]
    marginLeft: `TITLE.right` width: 32
    lineColor: `root.fgColor`

    [MouseArea
        [When "button.1.released: inside": `do root:invoke('togglePause') end`]
    ]

    [Image image: `PAUSE_BUTTON.appPaused and playImage or pauseImage`
        pauseImage: `R("DEBUG_Pause.png")`
        playImage: `R("DEBUG_Play.png")`
        x: 0 y: 0
    ]
]
[Rectangle id: DEBUG_TRANSFORM
    anchorX: [0 0]
    marginLeft: `PAUSE_BUTTON.right` width: 250
    lineColor: `root.fgColor`

    [Text font: `DEBUG.font`
        anchorX: [0 0.3]
        left: `root.margins`
        text: `string.format("x: %d", math.floor(DEBUG.x))`
        align: left valign: center

        [MouseArea
            [When button.2.pressed: `do
                DEBUG.x = 0
            end`]
        ]
    ]
    [Text font: `DEBUG.font`
        anchorX: [0.3 0.6]
        text: `string.format("y: %d", math.floor(DEBUG.y))`
        align: left valign: center

        [MouseArea
            [When button.2.pressed: `do
                DEBUG.y = 0
            end`]
        ]
    ]
    [Text font: `DEBUG.font`
        anchorX: [0.6 1]
        marginRight: `root.margins`
        text: `string.format("scale: %.2f", DEBUG.sx)`
        align: left valign: center

        [MouseArea
            [When button.2.pressed: `do
                DEBUG.sx, DEBUG.sy = 1, 1
            end`]
        ]
    ]

    scaleSpeed: 0.01
    scaleMin: 0.1
    scaleMax: 9.9
    editSpeed: `KEY.edit_faster.down and 5 or 1`

    addScale: `do
        local self, delta = ...
        DEBUG.sx = clamp(DEBUG.sx + delta * scaleSpeed * editSpeed, scaleMin, scaleMax)
        DEBUG.sy = DEBUG.sx
    end`
    addTranslation: `do
        local self, dx, dy = ...
        DEBUG.x = DEBUG.x + dx * editSpeed
        DEBUG.y = DEBUG.y + dy * editSpeed
    end`

    [MouseArea id: DEBUG_POSITION_MOUSE
        editing: false
        [When
            button.1.pressed: `do love.mouse.setGrabbed(true); love.mouse.setRelativeMode(true); self.editing = true end`
            button.1.released: `do love.mouse.setGrabbed(false); love.mouse.setRelativeMode(false); self.editing = false end`
            'editing, mouse.moved': `do DEBUG_TRANSFORM:addTranslation(mouse.moved.dx, mouse.moved.dy) end`
            'wheelmoved': `do DEBUG_TRANSFORM:addScale(wheelmoved.y) end`
            'editing, KEY.pan_up.down': `do DEBUG_TRANSFORM:addTranslation(0, 1) end`
            'editing, KEY.pan_left.down': `do DEBUG_TRANSFORM:addTranslation(1, 0) end`
            'editing, KEY.pan_down.down': `do DEBUG_TRANSFORM:addTranslation(0, -1) end`
            'editing, KEY.pan_right.down': `do DEBUG_TRANSFORM:addTranslation(-1, 0) end`
            'editing, KEY.scale_up.down': `do DEBUG_TRANSFORM:addScale(1) end`
            'editing, KEY.scale_down.down': `do DEBUG_TRANSFORM:addScale(-1) end`
        ]
    ]
]

[Text font: `DEBUG.font`
    anchorX: [1 1]
    marginLeft: -70 marginRight: `-root.margins`
    text: `string.format("FPS: %d", love.timer.getFPS())`
    align: right valign: center
]

[Graphics draw: `do
    love.graphics.setColor(root.fgColor)
    love.graphics.line(0, 0, self.width, 0)
end`]
