x: 0, y: 0
mass: 1
radius: 25
racketWidth: 10
racketHeight: `radius * 4`
color: [1 1 1]
damageColor: [1 0 0]
bodyColor: `self.takingDamage and damageColor or color`
racketColor: [0 1 1]
angularVelocity: 10
# flipX
# takingDamage: true

maxLife: 10
currentLife: 0

reset: `do
    self.currentLife = maxLife
    self.gameover = false
    self.takingDamage = false
end`

takingDamage: `self._takingDamage or self.gameover`
"set takingDamage": `do
    if value then
        self.currentLife = math.max(0, currentLife - 1)
        self.gameover = currentLife <= 0
    end
end`

[Body id: body x: `root.x` y: `root.y` type: dynamic
    mass: `root.mass`
    angularDamping: 1

    [CircleShape radius: `root.radius`
        fillColor: `bodyColor`
        [Fixture tag: BODY density: 5]
    ]
    [RectangleShape x: `(flipX and -1 or 1) * (racketHeight * 0.5 + root.radius * 0.5)` y: 0
        width: `racketWidth` height: `racketHeight`
        angle: `math.pi * 0.5`
        fillColor: `racketColor`
        [Fixture tag: RACKET friction: 1]
    ]
]

[When
    "goingLeft !goingRight": `do body.angularVelocity = -angularVelocity end`
    "!goingLeft goingRight": `do body.angularVelocity = angularVelocity end`
]
