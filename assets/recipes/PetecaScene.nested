p1x: `WINDOW_WIDTH * 0.25`
p2x: `WINDOW_WIDTH * 0.75`
py: `WINDOW_HEIGHT - R('Player').radius`
petecaX: `WINDOW_WIDTH * 0.5`
petecaY: 120
metersByPixel: 60

gamepaused: `OPTIONS_MENU.isOpen`
gameover: true

messages: { R.data score.data }
options: { R options.save }
controlMap: `R('control_map.data')`
refreshMusic: `do
    BGM.playing = options.MUSIC
end`

preinit: `do
    love.physics.setMeter(metersByPixel)
end`

init: `do
    love.graphics.setBackgroundColor(0.12, 0.12, 0.12)
    self:reset()
    OPTIONS_MENU:toggleCollapsed()
end`

reset: `do
    peteca.body.position = { petecaX, petecaY }
    peteca.body.angle = 0
    peteca.body.angularVelocity = 0
    peteca.body.linearVelocity = { 0, 0.1 }
    peteca.lastToHit = nil

    player1.body.position = { p1x, py }
    player1.body.linearVelocity = { 0, 0.1 }
    player1.body.angle = 0
    player1.body.angularVelocity = 0
    player1:reset()

    player2.body.position = { p2x, py }
    player2.body.linearVelocity = { 0, 0.1 }
    player2.body.angle = 0
    player2.body.angularVelocity = 0
    player2:reset()
end`

setPlayerWon: `do
    local self, winning = ...
    self.gameover = true
    OPTIONS_MENU.message = messages.wonTextFmt:format(winning)
    OPTIONS_MENU:toggleCollapsed()
end`

[AudioSource id: BGM
    source: { R 'Stack - fase.ogg' }
    playing: `options.MUSIC` looping: true
]

[World id: WORLD yg: `9.81 * metersByPixel`
    paused: `root.gamepaused or root.gameover`

    [Arena id: arena]
    [Player id: player1 color: [0 1 0]
        rotateValue: `P1_CONTROLLER:button_to_axis(unpack(controlMap.P1AXIS))`
        otherPlayer: `player2`
        "set gameover": `do if value then root:setPlayerWon(2) end end`

        [Controller id: P1_CONTROLLER device: `controlMap.P1DEVICE`]
    ]
    [Player id: player2 color: [1 1 0] flipX: true
        rotateValue: `P2_CONTROLLER:button_to_axis(unpack(controlMap.P2AXIS))`
        otherPlayer: `player1`
        "set gameover": `do if value then root:setPlayerWon(1) end end`

        [Controller id: P2_CONTROLLER device: `controlMap.P2DEVICE`]
    ]
    [Peteca id: peteca x: `petecaX` y: `petecaY`]

    [CollisionTracker a: [tag: PETECA] b: [tag: GROUND]
        beginContact: { peteca.lastToHit.otherPlayer.takingDamage: true  }
        endContact:   { peteca.lastToHit.otherPlayer.takingDamage: false }
        postSolve: `do peteca:impulse(contact:getNormal()) end`
    ]
    [CollisionTracker a: [tag: PETECA] b: [tag: RACKET]
        postSolve: { a.root.lastToHit: b.root }
    ]
    [CollisionTracker a: [tag: PETECA] b: [tag: BODY]
        beginContact: { b.root.takingDamage: true  }
        endContact:   { b.root.takingDamage: false }
    ]
]

[Keyboard id: ACTION
    pause: `self['return']`
    toggle_music: `m`
]

[LifeBar anchor: [0 0 0 0.4] margin: [10 10] height: 15
    color: `player1.color`
    maxLife: `player1.maxLife`
    currentLife: `player1.currentLife`
    takingDamage: `player1.takingDamage`
]
[Transform x: `WINDOW_WIDTH` sx: -1 sy: 1
    [LifeBar anchor: [0 0 0 0.4] margin: [10 10] height: 15
        color: `player2.color`
        maxLife: `player2.maxLife`
        currentLife: `player2.currentLife`
        takingDamage: `player2.takingDamage`
    ]
]

[CollapsableOptionsMenu id: OPTIONS_MENU
    message: `messages.initialText`
    ontogglemusic: `root.refreshMusic`
]

[When
    'ACTION.pause.pressed': `do
        if not OPTIONS_MENU.isOpen then
            OPTIONS_MENU.message = messages.pauseText
        end
        OPTIONS_MENU:toggleCollapsed()
    end`

    'gameover, ACTION.pause.pressed': `do
        self:reset()
        self.gameover = false
    end`

    'ACTION.toggle_music.pressed': `do OPTIONS_MENU.MENU.MUSIC:toggle() end`
]

